// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?         @db.Text
  accounts      Account[]

  workspaces   workspaces[]
  Members      Members[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model workspaces {
  id       String   @id @default(cuid())
  name     String

  joinCode  String  @unique

  userId   String
  user     User  @relation(references: [id],fields: [userId],onDelete: Cascade)

  members Members[]
  channels  Channels[]
  messages  Message[]
  conversion Conversion[]
  reaction Reaction[]

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model Members {
  id       Int   @id @default(autoincrement())

  userId  String
  user    User  @relation(fields: [userId], references: [id],onDelete: Cascade)

  workspaceId String
  workspace  workspaces  @relation(fields: [workspaceId], references: [id],onDelete: Cascade)

  messages Message[]
  reaction Reaction[]

  role Role   @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,workspaceId])
  @@index([userId,workspaceId],name:"by_workspace_id_user_id")
  @@index([userId],name:"by_user_id")
  @@index([workspaceId],name:"bg_workspace_id")
}


model Channels {
  id   Int     @id  @default(autoincrement())

  name  String

  workspaceId  String
  workspace  workspaces  @relation(fields: [workspaceId], references: [id],onDelete:Cascade)

  message Message[]

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  @@index([workspaceId],name:"by_workspace_id")
}

model Conversion {
  id       Int   @id @default(autoincrement())

  workspaceId String
  workspace workspaces  @relation(fields: [workspaceId], references: [id],onDelete: Cascade)

  memberOneId Int
  memberTwoId Int

  message Message[]


  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  @@index([workspaceId],name:"by_workspace_id")
}


model Message {
  id  Int @id   @default(autoincrement())

  body String  @db.Text
  image String?  @db.LongText

  memberId Int
  workspaceId String

  channelId Int?
  parentMessageId  Int?
  
  conversionId Int?

  member Members @relation(fields: [memberId], references: [id], onDelete: Cascade)
  workspace workspaces @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  channel Channels? @relation(fields: [channelId],references: [id],onDelete: Cascade)
  conversion Conversion? @relation(fields: [conversionId],references: [id],onDelete: Cascade)

  reaction Reaction[]

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  @@index([workspaceId],name:"by_workspace_id")
  @@index([memberId],name:"by_member_id")
  @@index([conversionId],name:"by_conversion_id")
  @@index([channelId,parentMessageId,conversionId],name:"by_channel_parent_conversion_id")
}

model Reaction {
  id  Int   @id  @default(autoincrement())

  workspaceId String
  messageId  Int
  memberId  Int

  value String

  workspace workspaces @relation(fields: [workspaceId],references: [id],onDelete: Cascade)
  message Message @relation(fields: [messageId],references: [id],onDelete: Cascade)
  member Members @relation(fields: [memberId],references: [id],onDelete: Cascade)

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}